# -*- coding: utf-8 -*-
"""project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MHRSAPF5zNiSHRuqISuPOM1yAzv462wm
"""

!pip install -q sklearn

from __future__ import print_function
import pandas as pd
import numpy as np
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation

#Mouting the drive to load a simple dataset stored on the google drive
from google.colab import drive
drive.mount('/content/gdrive')

#Loading the dataframe
spam_dataset_dataframe = pd.read_csv("/content/gdrive/My Drive/spam.data", sep = ' ')

spam_dataset_dataframe.head()

from sklearn.model_selection import train_test_split

#Creating a training and test set.

spam_training_set, spam_test_set = train_test_split(spam_dataset_dataframe, test_size=0.78,random_state=42)

#spam_test_set.head()

spam_training_data, spam_training_target = spam_training_set[["make","address","all","3d","our","over","remove","internet","order","mail","receive","will","people","report","addresses","free","business","email","you","credit","your","font","000","money","hp","hpl","george","650","lab","labs","telnet","857","data","415","85","technology","1999","parts","pm","direct","cs","meeting","original","project","re","edu","table","conference","semicol","paren","bracket","bang","dollar","pound","cap_avg","cap_long","cap_total"]], spam_training_set["Class"]
spam_test_data, spam_test_target = spam_test_set[["make","address","all","3d","our","over","remove","internet","order","mail","receive","will","people","report","addresses","free","business","email","you","credit","your","font","000","money","hp","hpl","george","650","lab","labs","telnet","857","data","415","85","technology","1999","parts","pm","direct","cs","meeting","original","project","re","edu","table","conference","semicol","paren","bracket","bang","dollar","pound","cap_avg","cap_long","cap_total"]], spam_test_set["Class"]

spam_training_data.head()

from sklearn.ensemble import RandomForestClassifier
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

# Creating classifer object
#clf = RandomForestClassifier(n_estimators = 1000, max_features = "log2")

clf = DecisionTreeClassifier(criterion = "entropy")

#LRI = LogisticRegression(max_iter=500)
#clf = AdaBoostClassifier(n_estimators = 1000,base_estimator=LRI)

#DT = DecisionTreeClassifier()
#clf = AdaBoostClassifier(n_estimators = 50,base_estimator=DT)

# Training Classifer
clf.fit(spam_training_data,spam_training_target)

#Predict the response for test dataset
spam_test_target_predict=clf.predict(spam_test_data)

#evaluating 
matrix = confusion_matrix(spam_test_target,spam_test_target_predict)
print('The Confusion Matrix is:\n', matrix)

per_class_acc =  matrix.diagonal()/matrix.sum(axis=1)
print('The per class classification accuracy of ham and spam are:', per_class_acc )

acc = accuracy_score(spam_test_target,spam_test_target_predict)
print('The accuracy is', acc)

#print(classification_report(spam_test_target,spam_test_target_predict))